openapi: '3.0.0'
info:
  title: LXD Api
  version: '1.0.0'
  description: |
    All the communications between LXD and its clients happen using a RESTful API over HTTP which is then encapsulated over either SSL for remote operations or a unix socket for local operations.
    I would like to add that naturally you may use the http socket locally as well, howver in this case the uausal clietn certificate autheitcation is required, 
    which can be easily accompished by lxd config trust add ...
    Not all of the REST interface requires authentication
    Unauthenticated endpoints are clearly identified as such by tags
    API versioning
    The list of supported major API versions can be retrieved using GET /.
    The reason for a major API bump is if the API breaks backward compatibility.
    Feature additions done without breaking backward compatibility only result in addition to api_extensions which can be used by the client to check if a given feature is supported by the server.
    Return values
    There are three standard return types:
    Standard return value
    Background operation
    Error
    These are described by respective compenets

    include https://github.com/lxc/lxd/blob/master/doc/rest-api.md#status-codes

    go to recursion, filtering

    contain The body is mostly provided as a user friendly way of seeing what's going on without having to pull the target operation, all information in the body can also be retrieved from the background operation URL.
  termsOfService: URL
  contact:
    name: TODO
    url: http://todo.url
    email: todoemail@todo.com  
  license:
    name: TODO
    url: http://todo.url
    # TODO license object
# TODO contact object
# TODO remove server object
# remove server variable object

# servers:
#   - url: http://localhost:8444

# tags:
  # - name: guest
  #   description: accessible to all
  # - name: untrusted
  # - name: trusted
  # - name: sync
  # - name: async
  # - name: etag
  #   description: ETag capable endpoint, TODO explain
paths:
  /:
    get:
      summary: List of supported APIs
      # tags:
      #   - sync
      #   - guest
      responses:
        200:
          description: List of supported API endpoint URLs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringListResponse'
# Not ideal example, better create separte response type
              example: | 
                {
                  ...
                  metadata: [
                    "/1.0"
                  ]
                }
                
  /1.0:
    get:
      operationId: serverInfo
      summary: Server configuration and environment information
      # tags:
      #   - guest
      #   - untrusted
      #   - trusted
      #   - sync
      responses:
        200:
          description: If the authentication is 'guest' or 'untrusted', the response contains significantly less information (only 'api_extensions', 'api_status', 'api_version', 'auth', and 'public' will be contained).
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/BaseResponse'
                - type: object
                  properties:
                    metadata:
                      type: object
                      properties:
                        api_extensions:
                          description: List of API extensions added after the API was marked stable
                          type: array
                          items: 
                            type: string
                        api_status:
                          type: string    
                          enum:
                            - stable
                            - deprecated
                            - development
                          description: API implementation status
                        api_version:
                          type: string
                          example: "1.0"
                        auth:
                          type: string
                          enum:
                            - trusted
                            - untrusted
                          description: Authentication state
                        config:
                          description: Host configuration
                          type: object
                          example: |
                            {                                     
                                "core.trust_password": true,
                                "core.https_address": "[::]:8443"
                            }
                          # TODO schema, and copy config schema to put and patch operation
                        environment:
                          description: Various information about the host (OS, kernel, ...)
                          type: object
                          properties:
                            addresses:
                              type: array
                              items:
                                type: string
                                example: "1.2.3.4:8443"
                            architectures:
                              type: array
                              items:
                                type: string
                                example: x86_64
                            certificate:
                              type: string
                              description: PEM certificate
                            driver:
                              type: string
                              example: lxc
                            driver_version:
                              type: string
                              example: 1.0.6
                            kernel:
                              type: string
                              example: Linux
                            kernel_architecture:
                              type: string
                              example: x86_64
                            kernel_version:
                              type: string
                              example: 3.16
                            server:
                              type: string
                              example: lxd
                            server_pid:
                              type: integer
                              example: 10224
                            server_version:
                              type: string
                              example: 0.8.1
                            storage:
                              type: string
                              example: btrfs
                            storage_version:
                              type: string
                              example: 3.19
                        public: 
                          type: boolean
                          description: Whether the server should be treated as a public (read-only) remote by the client
    put:
      # tags:
      #   - etag
      #   - trusted
      #   - sync
      summary: Replaces the server configuration or other properties
      description: Afterwards the configuration will be equal to the provided values, unset values will be deleted.
      requestBody:
          content:
            application/json:
              schema:
                type: object
              example: |
                {
                  "config": {
                    "core.trust_password": "my-new-password",
                    "core.https_address": "1.2.3.4:8443"
                  }
                }              
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'

    patch:
      # tags:
      #   - etag
      #   - trusted
      #   - sync
      # TODO Reflect this in code: Intorduced with API extension patch
      summary: Updates the server configuration or other properties
      description: Like PUT, but updates only the listed keys, other existing values remain as set.
      requestBody:
          content:
            application/json:
              schema:
                type: object
              example: |
                {
                  "config": {
                    "core.trust_password": "my-new-password"
                  }
                }              
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'

  /1.0/certicates:
    get:
      summary: List of trusted client certificates.
      # tags:
      #   - trusted
      #   - sync
      responses:
        200:
          description: List of URLs to trusted certificates.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringListResponse'
              example: |
                [
                  "/1.0/certificates/3ee64be3c3c7d617a7470e14f2d847081ad467c8c26e1caad841c8f67f7c7b09"
                ]
    post:
      summary: Add a new trusted client certificates.
      # tags:
      # - trusted
      # - untrusted
      # - sync
      requestBody:
          content:
            application/json:
              schema:
                type: object
                properties: 
                  type: 
                    type: string
                    description: Certificate type (keyring), currenlty only client
                    enum:
                      - client
                    example: client
                  certificate:
                    type: string
                    description: If provided, a valid x509 certificate. If not, the client certificate of the connection will be used
                  name:
                    type: string
                    description: An optional name for the certificate. If nothing is provided, the host in the TLS header for the request is used.
                    example: foo
                  password:
                    type: string
                    description: the trust password for the server (only required if untrusted)
                    example: server-trust-password
      responses:
        200:
          description: Standard success or error.
    
  /1.0/certicates/{fingerprint}:
    parameters:
      - name: fingerprint
        in: path
        description: TODO
        required: true
        schema:
          type: string
    get:
      summary: Trusted client certificate information.
      # tags:
        # - sync
        # - trusted
      responses:
        200:
          description: Dict representing the trusted client certificate.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateResponse'
    put:
      summary: Replaces the certificate properties.
      # tags:
      #     - trusted
      #     - sync
      #     - etag
      # TODO introduced with certificate_update
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  example: client
                name:
                  type: string
                  example: bar
      responses:
        200:
          description: standard return value or error
    
    patch:
      summary: Updates the certificate properties.
      # tags:
      #     - trusted
      #     - sync
      #     - etag
      # TODO introduced with certificate_update
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: bar
      responses:
        200:
          description: standard return value or error
    delete:
      summary: Remove a trusted client certificate.
      # tags:
      #     - trusted
      #     - sync
      responses:
        202:
          description: Accepted
                
  /1.0/instances:
    get:
      summary: List of instances
      responses:
        200:
          description: List of URLs for instances this server hosts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringListResponse'
              example: |
                In metadata, todo move to own response schema object
                [
                    "/1.0/instances/blah",
                    "/1.0/instances/blah1"
                ]
    post:
    # async
    # trusted
      summary: Create a new instance.
      parameters:
        - name: target
          in: query
          description: TODO not given
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  pattern: ^(?:(?=[^.,\/])[[:ascii:]]){1,64}$
                  description: 64 chars max, ASCII, no slash, no colon and no comma
                  # TODO null character?
                  example: my-new-instance
                architecture:
                  type: string
                  example: x86_64
                profiles:
                  description: List of profiles
                  type: array
                  items:
                    type: string
                  example: ["default"]
                ephemeral:
                  type: boolean
                  description: Wether to destroy the instance on shutdown
                config:
                  type: object
                  description: Config override
                  example: {limits.cpu: 2}
                  # TODO test this
                type:
                  type: string
                  enum:
                    - container
                    - virtual-machine
                  default: container
                  # TODO optional
                devices:
                  type: object
                  description: Optional. List of devices the instance should have
                  # TODO optional
                  example: |
                    {
                        "kvm": {
                            "path": "/dev/kvm",
                            "type": "unix-char"
                        }
                    }
                instance_type:
                  type: string
                  description: An optional instance type to use as basis for limits
                  example: "c2.micro"
                  #TODO optioanl
                source:
                  type: object
      responses:
        200:
          description: standard success or error           
    
    put:
      summary: Perform bulk operations on instances
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstancesPutRequest'
      responses:
        200:
          description: Background operation or standard error
    
  /1.0/instances/{name}:
    parameters:
    - name: name
      in: path
      description: TODO
      required: true
      schema:
        type: string
    get:
      summary: Instance information
      responses:
        200:
          description: Dictionary of the instance configuration and current state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceInformationResponse'

    put:
      summary: Replaces instance configuration or restore snapshot
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                architecture:
                  type: string
                  example: x86_64
                config:
                  type: object
                devices:
                    type: object
                ephemeral:
                    type: boolean
                profiles:
                  type: array
                  items:
                    type: string
                restore:
                  type: string
                  description: Snapshot name
                  example: snapshot-name 
      responses:
        200:
          description: Standard async accept

    patch:
      summary: Update instance configuration
      responses:
        200:
          description: standard sync response
    
    post:
      summary: Used to rename/migrate the instance
      parameters:
        - name: target
          in: query
          description: Required to migrate between cluster members. 
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: new name
                  example: new-name
                migration:
                  type: boolean
                live:
                  type: boolean
      responses:
        409:
          description: Conflict, returned if trying to rename to an existing name.
        200:
          description: If migration, provides migration secrets
          # TODO migration secretes schema

    delete:
      description: Remove the instance
      responses:
        202:
          description: accepted

  /1.0/instnaces/{name}/console:
    get:
      summary: Content of the console of the instance
      responses:
        200:
          description: console content
    
    post:
      summary: Attach to the console device of an instance
      responses:
        123:
          description: todo
    
    delete:
      summary: Empty the console log of the instance
      responses:
        200:
          description: standard error or empty response
      
  /1.0/instances/{name}/exec:
    post:
      summary: Run a remote command
      description: |
        wait-for-websocket indicates whether the operation should block and wait for a websocket connection to start for all the available file descriptors (except control, which is optional), or start immediately. This gives the possibility to pass stdin inputs and read stdout/stderr outputs as bytes.
        If starting immediately, /dev/null will be used for stdin, stdout and stderr. That's unless record-output is set to true, in which case, stdout and stderr will be redirected to a log file.
        If interactive is set to true, a single websocket is returned and is mapped to a pty device for stdin, stdout and stderr of the execed process.
        If interactive is set to false (default), three pipes will be setup, one for each of stdin, stdout and stderr.
        Depending on the state of the interactive flag, one or three different websocket/secret pairs will be returned, which are valid for connecting to this operations /websocket endpoint.
        The control websocket can be used to send out-of-band messages during an exec session. This is currently used for window size changes and for forwarding of signals.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                command:
                  description: Command and arguments
                  type: array
                  items: 
                    type: string
                  example: ["/bin/bash"]
                environment:
                  type: object
                  description: Optional extra environment variables to set
                wait-for-websocket:
                  type: boolean
                  description: Whether to wait for a connection before starting the process. 
                record-output: 
                  type: boolean
                  description: Whether to store stdout and stderr (only valid with wait-for-websocket=false) (requires API extension container_exec_recording)
                interactive:
                  type: boolean
                  description: Whether to allocate a pty device instead of PIPEs
                width": 
                  description: Initial width of the terminal (optional)
                  example: 80,                    
                height": 
                  description: Initial height of the terminal (optional)
                  example: 25,                   
                user": 
                  description: User to run the command as (optional)
                  example: 1000,                   
                group": 
                  description: Group to run the command as (optional)
                  example: 1000,                  
                cwd": 
                  description: Current working directory (optional)
                  example: "/tmp"
                  
# wait-for-websocket indicates whether the operation should block and wait for a websocket connection to start for all the available file descriptors (except control, which is optional), or start immediately. This gives the possibility to pass stdin inputs and read stdout/stderr outputs as bytes.
# If starting immediately, /dev/null will be used for stdin, stdout and stderr. That's unless record-output is set to true, in which case, stdout and stderr will be redirected to a log file.
# If interactive is set to true, a single websocket is returned and is mapped to a pty device for stdin, stdout and stderr of the execed process.
# If interactive is set to false (default), three pipes will be setup, one for each of stdin, stdout and stderr.
# Depending on the state of the interactive flag, one or three different websocket/secret pairs will be returned, which are valid for connecting to this operations /websocket endpoint.
# The control websocket can be used to send out-of-band messages during an exec session. This is currently used for window size changes and for forwarding of signals.
      responses:
        200:
          description: background operation + optional websocket information or standard error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExecResponse'
      
  
  /1.0/instances/{name}/files:
    get:
      summary: Download a file or directory from the instance
      parameters:
        - name: path
          in: query
          description: Path inside the instance
          required: true
          schema:
            type: string
          example: /path/inside/the/instance
        - name: name
          in: path
          description: Name of instance
          required: true
          schema:
            type: string
      responses:
        200:
          description: if the type of the file is a directory, the return is a sync response with a list of the directory contents as metadata, otherwise it is the raw contents of the file
          headers:
            X-LXD-uid: 
              schema:
                type: integer
                example: 0
            X-LXD-gid: 
              schema:
                type: integer
                example: 0
            X-LXD-mode: 
              schema:
                type: integer
                # TODO TEST???? String
                example: 0700
            X-LXD-type: 
              schema:
                type: string
                enum:
                  - directory
                  - file
          content:
            application/binary: {}

    post:
      summary: Upload a file to the instance. Standard http file upload
      parameters:
        - name: X-LXD-uid
          in: header
          description: user id of created file
          required: false
          schema:
            type: integer
            example: 0
        - name: X-LXD-gid
          in: header
          description: group id of created file
          required: false
          schema:
            type: integer
            example: 0
        - name: X-LXD-mode
          in: header
          description: file mode
          required: false
          schema:
            type: integer
            example: 0700
        - name: X-LXD-type
          in: header
          description: File type
          required: false
          schema:
            type: string
            enum:
              - directory
              - file
              - symlink
        - name: X-LXD-write
          in: header
          description: overwrite or append. introduced in api extension file_append
          required: false
          schema:
            type: string
            enum:
              - overwrite
              - append
              # TEst this? is this rely enum, waht is default?
      responses:
        200:
          description: stanard return or error, no metadata 
  
  /1.0/instances/{name}/snapshots:
    get:
      summary: List of snapshots
      responses:
        200:
          description: List of URLs for snapshots for this instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringListResponse'
              example: '{ ..., metadata: [ \"/1.0/instances/blah/snapshots/snap0" ] }'
    
    post:
      summary: Create a new snapshot
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: my-snapshot
                  description: Name of the snapshot
                stateful:
                  type: boolean
                  description: Whether to include state too
      responses:
        200:
          description: Background operation or standard error  

  /1.0/instances/{name}/snapshots/{name}:
    get:
      summary: Snapshot information
      responses:
        200:
          description: Dictionary representing the snapshot
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SnapshotInformationResponse'

    post:
      summary: Used to rename/migrate the snapshot
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name: 
                  type: string
                  example: new-name
                
                migration:
                  type: boolean
                live:
                  type: boolean
                  # TODO original document refers to thsi as true string 
      responses:
        200:
          description: Background information or standard error
          content:
            application/json:
              schema:                
                $ref: '#/components/schemas/SnapshotMigrationResponse'
        409:
          description: Conflict, if rename to an existing name

    delete:
      summary: Remove the snapshot
      responses:
        200:
          description: Background information or standard error

    put:
      summary: Update the snapshot (what does that even mean????)
      responses:
        202:
          description: Background information or standard error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SnapshotUpdateResponse'

  /1.0/instances/{name}/state:
    get:
      summary: Current state                 
      responses:
        200:
          description: Dictionary representing the current state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceStateResponse'
    
    put:
      summary: Change the instance state
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: 
                action:
                  type: string
                  description: State change action
                  enum:
                    - stop
                    - start
                    - restart
                    - freeze 
                    - unfreeze
                timeout:
                  type: integer
                  description: A timeout after which the state change is considered as failed
                  example: 30
                force:
                  type: boolean
                  description:  Force the state change (currently only valid for stop and restart where it means killing the instance)
                stateful:
                  type: boolean
                  description:  Whether to store or restore runtime state before stopping or starting (only valid for stop and start, defaults to false)

      responses:
        200:
          description: Backgroundoperation or standard error

  /1.0/instances/{name}/logs:
    get:
      summary: |
        Returns a list of the log files available for this instance. 
        Note that this works on instances that have been deleted (or were never created) 
        to enable getting logs for failed creations.                
      responses:
        200:
          description: A list of available log files
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringListResponse'
              example: '{... metdata: ["/1.0/instances/blah/logs/forkstart.log", "/1.0/instances/blah/logs/lxc.conf", "/1.0/instances/blah/logs/lxc.log"]}'

  /1.0/instances/{name}/logs/{logfile}:
    get:
      summary: Returns teh contents of a particular log file 
      responses:
        200:
          description: The contents of the log file
          content:
            application/txt: {}
              # TODO test
    delete:
      summary: Delete a particular log file 
      responses:
        200:
          description: Empty response or standard error

  /1.0/instances/{name}/metadata:
    get:
      summary: Instance metadata
      responses:
        200:
          description: Dictionary representing instance metadata 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceMetadataResponse'    
                
    put:
      summary: Replaces instnace metadata
      requestBody:
        content:
          application/json:
            schema:
              type: object
              # metadata of InstanceMetadataResponse
      responses:
        200:
          description: Stanard return value or error

  /1.0/instances/{name}/metadata/templates:
    parameters:
      - name: path
        in: query
        schema:
          type: string

    get:
      summary: List instance templates 
      
      responses:
        200:
          description: List with instance template names OR Conetnet of an instance template if template query paramter is set
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringListResponse'
              example: '{... metadata:[ "template.tpl" ]}'
            application/txt: {}
    
    post: 
      summary: Add a container template
      # standard http file upload
      # requestBody:
      #   content:
      #     application/txt: {}
      responses:
        200:
          description: standard return or error
    
    put:
      summary: Replace content of a template
      # standard http file upload
      # requestBody:
      #   content:
      #     application/txt: {}
      responses:
        200:
          description: standard return or error
  
    delete:
      summary: Delete an instance template 
      responses:
        200:
          description: stanadrd return or error 

  /1.0/instances/{name}/backups:
    get:                
      summary: List of backups for the instance 
      responses:
        200:
          description: List of backup URLs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringListResponse'    
              example: '{... metadata: ["/1.0/instances/c1/backups/c1/backup0"] }'
    
    post:
      summary: Create a new backup 
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Unique identifier for the backup
                  example: backupName
                expiry:
                  type: integer
                  description: When to delete the backup automatically
                  # TODO duration in seconds from now???
                  example: 3600
                instance_only:
                  type: boolean
                  description: if true, snapshots are not included
                optimized_storage:
                  type: boolean
                  description: if true, btrfs send or zfs send is used for instance and snapshots
      responses:
        200:
          description: Background operation or standard error


  /1.0/instances/{name}/backups/{name}:
    get:
      summary: Backup information 
      responses:
        200:
          description: Dictionary of backup
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackupInformationResponse'   
    
    delete:
      summary: Remove the backup 
      responses:
        200:
          description: background oeration or error

    post:
      summary: Rename the backup 
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:            
                name:
                  type: string
                  example: new-name
      responses:
        200:
          description: Background operation or error

  /1.0/instances/{name}/backups/{name}/export:
    get:
      summary: Fetch the backup tarball 
      responses:
        200:
          description: Dict containing the backup tarball
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackupExportResponse'  

  /1.0/events:
    get:
      summary: Websocket upgrade
      description: This URL isn't a real REST API endpoint, instead doing a GET query on it will upgrade the connection to a websocket on which notifications will be sent.
      parameters:
        - name: type
          description: comma separated list of notifications to subscribe to (defaults to all), Each notification is sent as a separate JSON dict
          in: query
          style: form
          schema:
            type: array
            items:
              type: string
              description: |
                operation (notification about creation, updates and termination of all background operations)
                logging (every log entry from the server)
                lifecycle (instance lifecycle events)
              enum:
                - operation
                - logging
                - lifecycle
              # TODO test
      responses:
        200:
          description: No return, never ending flow of events
          content:
            websocket:
              schema:
                type: object
                properties:
                  timestamp:
                    type: string
                    example: 2015-06-09T19:07:24.379615253-06:00
                  type: 
                    type: string
                    example: operation
                  metadata:
                    type: object


  /1.0/images:
    get:
      summary: List of images (public or private) 
      responses:
        200:
          description: List of URLs for images this server publishes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringListResponse'
              example: '{... metadata: ["/1.0/images/54c8caac1f61901ed86c68f24af5f5d3672bdc62c71d04f06df3a59e95684473"]}'    

    post:
      summary: Create and publish a new image
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: |
          One of:
          - HTTP file uplaod
          - Source image dictionary (transfers a remote image)
          - Source instance dictionary (makes an image out of a local instance)
          - Remote image URL dictionary (downloads a remote image)
          TODO model tehse
      responses:
        200:
          description: Background operation or stnadard error

  /1.0/images/{fingerprint}:
    get:
      summary: Image description and metadata
      parameters:
        - name: secret
          in: query
          schema:
            type: string
      responses:
        200:
          description: Dictionary representing an image properties
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageInfoResponse'    

    put:
      summary: Replaces the image properties, update information and visibility 
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: 
                auto_update: 
                  type: boolean
                properties:
                  type: object
                  properties:
                    architecture: 
                      type: string
                      example: x86_64
                    description:
                      type: string
                      example: Ubuntu 18.04 LTS server (20180601)
                    os:
                      type: string
                      example: ubuntu
                    release:
                      type: string
                      example: bionic
                public:
                  type: boolean

      responses:
        200:
          description: standard return or error
    patch:
      summary: Updates the image properties, update information and visibility 
      requestBody: 
        content: {}
        # TODO as for put
      responses:
        200:
          description: standard return or error

    delete:
      summary: Remove an image 
      responses:
        202:
          description: background operation or standard error

  /1.0/images/{fingerprint}/export:
    get:
      summary: Download the image tarball
      description: |
        The secret string is required when an untrusted LXD is spawning a new instance from a private image stored on a different LXD.
        Rather than require a trust relationship between the two LXDs, the client will POST to /1.0/images/<fingerprint>/export to get a secret token which it'll then pass to the target LXD. That target LXD will then GET the image as a guest, passing the secret token.
      parameters:
        - name: secret
          in: query
          required: false
          schema:
            type: string
      responses:
        200:
          description: Raw file or standard error

    post:
      summary: Upload??? TODO the image tarball 
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                target:
                  type: string 
                secret:
                  type: string
                certificate:
                  type: string
                aliases:
                  type: array
                  items:
                    type: string
      responses:
        200:
          description: background operation or standard error

  /1.0/images/{fingerprint}/refresh:
    post:
      summary: Refresh an image from its origin
      description: This creates an operation to refresh the specified image from its origin. 
      responses:
        200:
          description:  background operation or stnadard error

  /1.0/images/{fingerprint}/secret:
    post:
      summary: Generate a random token and tell LXD to expect it to be used by a guest 
      description: |
        The secret is automatically invalidated 5s after an image URL using it has been accessed. This allows to both retried the image information and then hit /export with the same secret.
      responses:
        200:
          description: Background operation or standard error, with secret metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageSecretResponse'

  /1.0/images/aliases:
    get:
      summary: List of aliases (public or private based on image visibility) 
      responses:
        200:
          description: List of URLs for aliases this server knows about
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringListResponse'
              example: '{... metadata:[ "/1.0/images/aliases/bionic" ]}'

    post:
      summary: Create a new alias 
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
                  example: The alias description
                target:
                  type: string
                  example: SHA256 ???TODO of image??
                name:
                  type: string
                  example: alias-name
      responses:
        200:
          description: standard return or error

  /1.0/images/aliases/{name}:
    get:
      summary: Alias description and target 
      responses:
        200:
          description: Dictionary representing an alias description and target
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageAliasInfoResponse'    

    put:
      summary: Replaces the alias target or description 
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: 
                description:
                  type: string
                target:
                  type: string               
      responses:
        200:
          description: standard return or error

    patch:
      summary: Updates teh alias target or description 
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: 
                description:
                  type: string
                target:
                  type: string                
      responses:
        200:
          description: standard return or error

    post:
      summary: Rename an alias 
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:                
                name:
                  type: string
      responses:
        409:
          description: conflict erenaming existing name
        200:
          description: standard return or error

    delete:
      summary: Remove an alias 
      responses:
        200:
          description: standard return or error

  /1.0/networks:
    get:
      summary: List of networks 
      responses:
        200:
          description: List of URLs for netowrks that are currently defined on the host, SERVER? TODO 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringListResponse'

    post:
      summary: Define a new network
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: 
                name:
                  type: string
                  example: my-network
                description:
                  type: string
                  example: My network
                config:
                  type: object
                  properties:
                    ipv4.address:
                      type: string
                      example: none
                    ipv6.address:
                      type: string
                      example: 2001:470:b368:4242::1/64
                    ipv6.nat:
                      type: boolean
      responses:
        200:
          description: standrad return or error

  /1.0/networks/{name}:
    get:
      summary: Information about a network 
      responses:
        200:
          description: Dictionary representing a network 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkInfoResponse'

    put:
      summary: Replace the network information 
      description: Same dict as used for initial creation and coming from GET. Only the config is used, everything else is ignored.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:                
                config:
                  type: object
                  properties:
                    bridge.driver: 
                      type: string
                      example: openvswitch
                    ipv4.address:
                      type: string
                      example: 10.0.3.1/24
                    ipv6.address:
                      type: string
                      example: fd1:6997:4939:495d::1/64
      responses:
        200:
          description:  starndrd return or error

    patch:
      summary: Update the network information 
      # request body i assume as before? TODO
      responses:
        200:
          description: standard return or error

    post:
      summary: Rename a network 
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: 
                name: 
                  type: string
                  example: new-name
      responses:
        409:
          description: Conflict
  
  /1.0/networks/{name}/state:
    get:
      summary: Network state 
      responses:
        200:
          description: Dictionary represneting the network state 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkStateResponse'

  /1.0/operations:
    get:
      summary: List of operations 
      responses:
        200:
          description: Dictionary representing a list of URLs for operations that are currently going on/queued accoridng to their status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationsListResponse'

  /1.0/operations/{uuid}:
    get:
      summary:  Background operation
      responses:
        200:
          description: Dictionary representing a background operation, stnadard background operation answer

    delete:
      summary: cancel an operation. Calling this will change the state to "cancelling" rather than actually removing the entry.
      responses:
        202:
          description: standard return or error

  /1.0/operations/{uuid}/wait:
    get:
      summary: Wait for an operation to finish
      parameters:
        - name: timeout
          description: Timeout after x seconds or wait indefinitly
          in: query
          required: false
          schema:
            type: integer 
            example: 30
      responses:
        200:
          description: Dict of operation after its reached its final state
          # TODO schema
          
  /1.0/operations/{uuid}/websocket:
    get:
      summary: Get websocket for operation  
      description: |
        This connection is upgraded into a websocket connection speaking the protocol defined by the operation type. For example, in the case of an exec operation, the websocket is the bidirectional pipe for stdin/stdout/stderr to flow to and from the process inside the instance. In the case of migration, it will be the primary interface over which the migration information is communicated. The secret here is the one that was provided when the operation was created. Guests are allowed to connect provided they have the right secret.
      parameters:
        - name: secret
          in: query
          required: true
          schema: 
            type: string
      responses:
        200:
          description: Websocket stream or standard error
  
  /1.0/profiles:
    get:
      summary: List of configuration profiles 
      responses:
        200:
          description: List of URLS to defined profiles
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringListResponse'
              example: '{... metadata: ["/1.0/profiles/default"] }'

    post:
      summary: Create a new profile 
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: 
                name:
                  type: string
                  example: my-profilename
                description:
                  type: string
                  example: Some description string
                devices:
                  type: object
                  # TODO create devices schema          
      responses:
        200:
          description: standardreturn or error

  /1.0/profiles/{name}:
    get:
      summary: Profile configuration 
      responses:
        200:
          description: Dictionary representing the profile content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileInfoResponse'

    put:
      summary: Replace the profile information 
      # TODO
      # requestBody: Same dict as used for initial creation and coming from GET. The name property can't be changed (see POST for that).           
      responses:
        200:
          description: standard return or error

    patch:
      summary: update the profile information 
      # TODO
      # requestBody: Same dict as used for initial creation and coming from GET. The name property can't be changed (see POST for that).           ???
      responses:
        200:
          description: standard return or error 

    post:
      summary: Rename a profile 
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:     
                name:
                  type: string
                  example: new-name           
      responses:
        204:
          description: no content and location must point ot the renamed resource 
        409:
          description: Conflict
        403:
          description: Attempting to rename the default profile will return the 403 (Forbidden) HTTP code.

    delete:
      summary: Remove a profile 
      responses:
        202:
          description: standard return or error
        403:
          description: Attempting to delete default.
          
  /1.0/projects:
    get:
      summary: List of projects 
      responses:
        200:
          description: List of URLs to defined projects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringListResponse'
              example: '{... metadata: ["/1.0/projects/default"] }'

    post:
      summary: Create a new project 
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:                
                name:
                  type: string
                  example: test
                description:
                  type: string
                config:
                  type: object
                  properties:
                    features.images: 
                      type: boolean
                    features.profiles:
                      type: boolean
      responses:
        200:
          description: standard return or error
 
  /1.0/projects/{name}:
    get:
      summary: Project configuration 
      responses:
        200:
          description: Dictionary representing the project content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectInfoResponse'

    put:
      summary: Replace the project information 
      # requestBody: Same dict as used for initial creation and coming from GET. The name property can't be changed (see POST for that). TODO
      responses:
        200:
          description: standard return or error

    patch:
      summary: Update the project information 
      # requestBody: Same dict as used for initial creation and coming from GET. The name property can't be changed (see POST for that). TODO
      responses:
        200:
          description: standard return or error

    post:
      summary: Rename a project
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:      
                name:
                  type: string
                  example: new-name          
      responses:
        204:
          description: accpeted no content?? and location must point to the renamed resource
        409:
          description: Conflict
        403:
          description: default cannot be renamed
       
    delete:
      summary: Remove a project
      responses:
        202:
          description: standard return or error
        403:
          description: default cannot be removed

  /1.0/storage-pools:
    get:
      summary: List of storage pools 
      responses:
        200:
          description: List of storage pools that are currently defined on the host ??? server TODO
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringListResponse'
              example: '{... metadata: ["/1.0/storage-pools/default"]}'

    post:
      summary: Create a new storage pool
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:                
                name:
                  type: string
                  example: pool1
                driver:
                  type: string
                  example: zfs
                config:
                  type: object
                  properties:
                    size:
                      type: string
                      example: 10GB
      responses:
        200:
          description:  tandard return or error

  /1.0/storage-pools/{name}:
    get:
      summary: Information about a storage pool 
      responses:
        200:
          description: Dictionary representing a storage pool
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoragePoolInfoResponse'

    put:
      summary: Replace the storage pool information 
      # requestBody: TODO I assume as before smae schema as for get
      responses:
        200:
          description: stanadrd return or error

    patch:
      summary: update the storage pool configuration  TODO why does it say configuraiton here?  
      # requestBody: TODO I assume as before smae schema as for get
      responses:
        200:
          description: stanadrd return or error

    delete:
      summary: Delete a storage pool
      responses:
        200:
          description: stanadrd return or error

  /1.0/storage-pools/{name}/resources:
    get:
      summary: Information about the resources available to the storage pool 
      responses:
        200:
          description: Dictionary representing the storage pool resources
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoragePoolsResourcesResponse'

  /1.0/storage-pools/{name}/volumes:
    get:
      summary: List of storage volumes 
      responses:
        200:
          description: List of storage volumes that currently exist on a given storage pool
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringListResponse'
              example: '{... metadata; ["/1.0/storage-pools/default/volumes/container/alp1"]}'
    
    post:
      summary: Create a new storage volume on the pool
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: volume1
                type:
                  type: string
                  example: custom
                config:
                  type: object
                source:
                  description: When copying  a volume
                  type: object
                  properties:
                    pool:
                      type: string
                      example: pool2
                    name:
                      type: string
                      example: volume2
                    type:
                      type: string
                      enum:
                        - copy
                        - migration
                    mode:
                      description: used when migrating
                      type: string
                      enum:
                        - pull
                        - push
                        - relay
      responses:
        200:
          description: stnadrd return or error
                
  /1.0/storage-pools/{pool}/volumes/{type}:
    post:  
      summary: Create a new storage volume 
      # parameters:
        # - type parameter form path
      # requestBody:
      #   content:
      #     application/json:
      #       schema:
      #       same as above without type
      responses:
        200:
          description: standard return or error
            
  /1.0/storage-pools/{pool}/volumes/{type}/{name}:
    post:
      summary: Rename a storage volume on a given storage pool 
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: 
                name:   
                  type: string
                  example: volume1
                pool:
                  type: string
                  example: pool3
                migration:
                  type: boolean
                  description: The migration does not actually start until someone (i.e. another lxd instance) connects to all the websockets and begins negotiation with the source.
      responses:
        200:
          description: For migration, these are the secrets that should be passed to the create call.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoragePoolsMigrationResponse'
    
    get:
      summary: Information about a storage volume of a given type on a storage pool
      responses:
        200:
          description: Dictionary represneting a storage volume
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoragePoolsVolumeInformationResponse'

    put:
      summary: Replace the storage volume information or restore from snapshot. send either config or restore.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: 
                config:
                  type: object
                
                restore:
                  type: string
                  example: snapshot-name
      responses:
        200:
          description: standard return or error
                
    patch:
      summary: Update the storage volume information
      # requestBody:TODO as for put i assume, but only ocnfig...
      responses:
        200:
          description: standard return or error
                
    delete:
      summary: Delete the storage volume 
      responses:
        200:
          description: standard return or error

  /1.0/storage-pools/{pool}/volumes/{type}/{name}/snapshots:
    get:
      summary: List of volume snapshots 
      responses:
        200:
          description: List of URLs for snapshots 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringListResponse'
              example: '{... metadata: ["/1.0/storage-pools/default/volumes/custom/foo/snapshots/snap0"]}'
    
    post:
      summary: Create a new volume snapshot 
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:                
                name:
                  type: string
                  example: my-snapshot
      responses:
        200:
          description:  background operation or standard error
            
  /1.0/storage-pools/{pool}/volumes/{type}/{name}/snapshots/name:
  # NAME parameter probably
    get:
      summary: Snapshot information 
      responses:
        200:
          description: Dictionary representing the snapshot
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoragePoolsVolumeSnapshotInformationResponse'

    put:
      summary: Replace snapshot information
      # TODO can this be used to change config?
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: 
                description:
                  type: string               
      responses:
        200:
          description: Dictionary representing the snapshot
          # TODO check if not jsust standard return
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoragePoolsVolumeSnapshotInformationResponse'
                
    post:
      summary: Rename the snapshot 
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:                
                name:
                  type: string
                  example: new-name
      responses:
        200:
          description: background operation or stnadard error

    delete:
      summary: Remove the snapshot 
      responses:
        202:
          description: background operation or standard error 
               
  /1.0/storage-pools/{pool}/volumes/{type}/{name}/backups:
    get:
      summary: List of backups for the volume 
      responses:
        200:
          description: List volume backup URLs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringListResponse'
              example: '{... metadata: ["/1.0/storage-pools/pool1/custom/vol1/backups/backup0"]}'
          
    post:
      summary: Create a new backup 
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:                
                name:
                  type: string
                  example: backupName
                  description: Unique identifier for the backup
                expiry:
                  type: integer
                  example: 3600
                  description: When to delete the backup automatically
                  # TODO duration from now in seconds
                volume_only:
                  type: boolean
                  description: if true, snapshots are not included
                optimized_storage:
                  type: boolean
                  description: if true, btrfs send or zfs send is used for volume and snapshots
      responses:
        200:
          description: background operation or standard error
                
  /1.0/storage-pools/{pool}/volumes/{type}/{name}/backups/{name}:
    get:
      summary: Get backup information
      responses:
        200:
          description: Dictionary of the backup
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VolumeBackupInformationResponse'
                
    delete:
      summary: Remove the backup 
      responses:
        200:
          description: background operation or stnadard error 

    post:
      summary: Rename the backup 
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:                
                name:
                  type: string
                  example: new-name
      responses:
        200:
          description: background operation or stnadard error
        # TODO why isthis async

  /1.0/storage-pools/{pool}/volumes/{type}/{name}/backups/{name}/export:
    get:
      summary: Fetch the backup tarball 
      responses:
        200:
          description: Dictionary contianing the tarball
          # TODO link to bysteream response, we have this already somewhere

  /1.0/resources:
    get:
      summary: Information about the system resource available to the LXD server 
      responses:
        200:
          description: Dictionary of the system resources
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourcesResponse'

  /1.0/cluster:
    get: 
      summary: Information about a cluster (such as networks and storage pools)
      responses:
        200:
          description: Dictionary representing a cluster 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterInfoResponse'

    put:
      summary: bootstrap or join a cluster, or disable clustering on this node
      description: TODO various inputs and outputs
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: 
                server_name:
                  type: string
                  example: lxd1
                enabled:
                  type: boolean
                  example: true
      responses:
        200:
          description: various different outputs, sync asycn

  /1.0/cluster/members:
    get:
      summary: List of LXD members in the cluster 
      responses:
        200:
          description: List of cluster members TDOO these are URLs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringListResponse'
              example: '{... metadata:["/1.0/cluster/members/lxd1"]}'


  /1.0/cluster/members/{name}:
    get:
      summary: Retreive  cluster member information and status
      responses:
        200:
          description: Dictionary representing the member
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterMemberInfoResponse'

    post:
      summary: Rename a cluster member 
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: 
                server_name:
                  type: string
                  example: node1               
      responses:
        200:
          description: standard return or error

    delete:
      summary: Remove a member of the cluster
      parameters:
        - name: force
          in: query
          schema:
            type: integer
            example: 1
            # WTF why is this not a bool, why is it one
      responses:
        200:
          description:  background operation or error

components:
  schemas:

    StringListResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties: 
            metadata:
              type: array
              items:
                type: string

    RootResponse:
      allOf:
      - $ref: '#/components/schemas/BaseResponse'
      - type: object
        properties:
          metadata:
            type: array
            items:
              type: string


    BaseResponse:
      description: | 
        Every response provided by the API provides the folloing values.
        Request specific information is encapsulated in the metadata field, the schema of which is specified by the operation specific response schemas.

        RESOLVE: The original document specified standard, background and error responses, however, it appears that any response contains the joint properties of all these responses.
      type: object
      properties:
        type:
          type: string
          description: Synchronous or asynchronous operation. Each endpoint is tagged accordingly. (better wording)
          enum:
            - sync
            - async
        status:
          type: string
          example: "OK"
        status_code:
          type: integer
          example: 100
        operation:
          type: string
          description: URL to the background operation
          example: "/1.0/instances/<id>"
          # TODO check this example
        error:
          type: string
          example: "Failure"
        error_code:
          type: integer
          example: 400
          

    BackgroundOperationResponse:
      description: Similar to BaseResponse, this is a generalized schema contained in the metadata of every async operation, in turn this schema aswell contains a metdata property, whcih roivdes request specfric details.
      allOf:
      - $ref: '#/components/schemas/BaseResponse'
      - type: object
        properties:
          metadata:
            type: object
            properties:
              id:
                type: string
                description: UUID of this operation
                example: 'a40f5541-5e98-454f-b3b6-8a51ef5dbd3c'
              class:
                type: string
                description: One of "task" (background task), "websocket" (set of websockets and crendentials) or "token" (temporary credentials)
                enum:
                  - task
                  - websocket
                  - token
              created_at:
                type: string
                description: When the operation was created
                example: 2015-11-17T22:32:02.226176091-05:00
              updated_at:
                type: string
                description: When the operation was updated
                example: 2015-11-17T22:32:02.226176091-05:00
              status:
                type: string
                description: String version of the operation's status for human readable response
                example: "Running"
              status_code:
                description: Integer version of the operation's status (use this rather than status)
                type: integer
              resources:
                description: Dictionary of resource types (container, snapshots, images) and affected resources
                type: object
                properties: 
                  containers:
                    type: array
                    items:
                      type: string
                      example: /1.0/instances/test
                      # TODO test for other non containers stuff
              may_cancel:
                type: boolean
                description: Whether the operation can be canceled (DELETE over REST)
              err:
                type: string
                description: The error string should the operation have failed

    CertificateResponse:
      allOf:
      - $ref: '#/components/schemas/BaseResponse'
      - type: object
        properties:
          metadata:
            type: object
            properties:
              type:
                type: string
                example: client
                # TODO enum? fiedd, keyring???
              certificate:
                type: string
                description: PEM certificate
              name:
                type: string
                example: foo
              fingerprint:
                type: string
                description: SHA256 hash of the raw certificate, TODO how is this different from the fingerprint request path

    ImageSource:
      type: object
      # oneOf:
      #   - $ref: '#/components/schemas/ImageSource_Image'
        # - $ref: '#/components/schemas/ImageSourceMigration'
        # - $ref: '#/components/schemas/ImageSourceCopy'
        # - $ref: '#/components/schemas/ImageSourceNone'
      # discriminator:
      #   propertyName: type
      #   mapping:
      #     image: '#/components/schemas/ImageSource_Image'
          # migration: '#/components/schemas/ImageSourceMigration'
          # copy: '#/components/schemas/ImageSourceCopy'
          # none: '#/components/schemas/ImageSourceNone'

    ImageSource_Image:
      type: object
      required:
        - type
      properties:
        type: 
          type: string
          enum:
            - image
            - migration
            - copy
            - none
        alias:
          type: string
          description: Based on local image identified by alias
          example: ubuntu/devel
        fingerprint:
          type: string
          description: Based on local image identified by its SHA256 fingerprint 
        properties:
          type: object
          description: Based on local image, most recent match based on properties.
          properties:
            os:
              type: string
              example: ubuntu
            release:
              type: string
              example: "18.04"
            architecture:
              type: string
              example: x86_64
    # ImageSourceNone:
    #   description: For instance without pre-populated rootfs (useful when attaching to an existing one)
    #   properties: {}
    # ImageSourceCopy:
    #                 mode:
    #                   type: string
    #                   enum:
    #                     - local
    #                     - pull
    #                     - push
    #                 server:
    #                   type: string
    #                   description: Remote server (pull mode only)
    #                   example: "https://10.0.0.3:8443"
    #                 protocol:
    #                   type: string
    #                   description: Protocol (defaults to lxd, TODO)
    #                   enum:
    #                     - lxd
    #                     - simplestreams
    #                 certificate:
    #                   type: string
    #                   description: PEM certificate, optional, if not system CA is used.
    #                   # TODO optional
    #                 alias:
    #                   type: string
    #                   description: name of the alias
    #                   example: ubuntu/devel
    #                 fingerprint:
    #                   type: string
    #                   description: SHA256 image fingerprint
                    
    #                 secret:
    #                   type: string
    #                   description: Secret to use to retrieve the image
    #                 base-image: 
    #                   type: string
    #                   description:  Optional, Optional, the base image the instance was created from 
    #                 instance_only:
    #                   type: boolean
    #                   description: Whether to migrate only the instance without snapshots. Can be "true" or "false".
    #                 secrets:
    #                   description: Secrets to use when talking to the migration source
    #                   type: object
    #                   properties:
    #                     control:
    #                       type: string
    #                     criu:
    #                       type: string
    #                     fs:
    #                       type: string

    #                 operation":
    #                   type: string
    #                   example: https://10.0.2.3:8443/1.0/operations/<UUID>
    #                   description: Full URL to the remote operation (pull mode only)

    #                 source:
    #                   type: string
    #                   example: my-old-instance
                    
    #                 live:
    #                   type: boolean
    
    InstancesPutRequest:
      allOf:
      - $ref: '#/components/schemas/BaseResponse'
      - type: object
        properties:
          metadata:
            type: object
            properties:
              state: 
                type: object
                properties:
                  action:
                    description: State change action
                    type: string
                    enum:
                      - start
                      - stop
                      - restart
                      - freeze
                      - unfreeze
                  timeout:
                    type: integer
                    description: A timeout in seconds after which the state change is considered as failed
                  force:
                    type: boolean
                    description: Force the state change (currently only valid for stop and restart where it means killing the instance)
                  stateful:
                    type: boolean
                    description: Whether to store or restore runtime state before stopping or starting (only valid for stop and start, defaults to false)
                    # todo optional
                  
    InstanceInformationResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            metadata:
              type: object
              properties:
                architecture:
                  type: string
                  example: x86_64
                config:
                  type: object
                  example: { limits.cpu: 3 }
                created_at: 
                  type: string 
                  example: 2016-02-16T01:05:05Z
                devices:
                  type: object
                  example: { root: { path: /, type: disk } }
                ephemeral: 
                  type: boolean
                expanded_config:
                  type: object
                  description: The result of expanding profiles and adding the instance's local config
                expanded_devices:
                  type: object
                  description: the result of expanding profiles and adding the instance's local devices
                last_used_at: 
                  type: string
                  example: 2016-02-16T01:05:05Z
                name: 
                  type: string
                  example: my-instance
                profiles:
                  type: array
                  items:
                    type: string
                    example: default                    
                stateful:
                  type: boolean
                  description: If true, indicates that the instance has some stored state that can be restored on startup
                status:
                  type: string
                  # TODO enum?
                status_code: 
                  type: integer
                  example: 103

    ExecResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            metadata:
              type: object
              properties: 
                fds:
                  description: IO-file descriptors websocket secrets
                  type: object
                  properties:
                    0:
                      type: string
                      example: f5b6c760c0aa37a6430dd2a00c456430282d89f6e1661a077a926ed1bf3d1c21
                    1:
                      type: string
                      example: 464dcf9f8fdce29d0d6478284523a9f26f4a31ae365d94cd38bac41558b797cf
                    2:
                      type: string
                      example: 25b70415b686360e3b03131e33d6d94ee85a7f19b0f8d141d6dca5a1fc7b00eb
                    control:
                      type: string
                      example: 20c479d9532ab6d6c3060f6cdca07c1f177647c9d96f0c143ab61874160bd8a5
                output:
                  type: object
                  properties:
                    1:
                      type: string
                      example: /1.0/instances/example/logs/exec_b0f737b4-2c8a-4edf-a7c1-4cc7e4e9e155.stdout
                    2:
                      type: string
                      example: /1.0/instances/example/logs/exec_b0f737b4-2c8a-4edf-a7c1-4cc7e4e9e155.stdout
                return:
                  type: integer
                  example: 0
      

    SnapshotInformationResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            metadata:
              type: object
              properties: 
                architecture:
                  type: string
                  example: x86_64
                config:
                  type: object
                  description: container configuration
                # TODO ... same various fields as for contianer information
                size:
                  type: integer
                  description: Size of the snapshot [in bytes???]
                stateful:
                  type: boolean
                  # description: ???TODO

    SnapshotMigrationResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            metadata:
              type: object
              properties: 
                control:
                  type: string
                  description: Migration control socket
                  example: secret1
                fs:
                  type: string
                  description: Filesystem transfer socket
                  example: secret3
    
    SnapshotUpdateResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            metadata:
              type: object
              properties: 
                expires_at:
                  type: string
                  example: 2019-01-16T12:34:56+02:00

    InstanceStateResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            metadata:
              type: object
              properties: 
                status:
                  type: string
                  example: Running
                status_code:
                  type: integer
                  example: 103
                cpu:
                  type: object
                  properties:
                    usage:
                      type: integer
                      example: 4986019722
                disk:
                  type: object
                  properties:
                    # TODO this is technically not correct, as this is keyed with the disk name...
                    root:
                      type: object
                      properties:
                        usage:
                          type: integer
                          example: 422330368
                memory:
                  type: object
                  properties:
                    usage:
                      type: integer
                    usage_peak:
                      type: integer
                    swap_usage:
                      type: integer
                    swap_usage_peak:
                      type: integer
                network:
                  type: object
                  properties:
                    eth0:
                      # TODO this is technically not correct, as this is keyed with the disk name...
                      type: object
                      properties:
                        addresses:
                          type: array
                          items:
                            type: object
                            properties:
                              family:
                                type: string
                                example:  inet
                              address:
                                type: string
                                example: '10.0.3.27'
                              netmask:
                                type: string
                                # TODO this is an int carried in a string?? or can is also be somethign lik 255.255.0.0?
                                example: 24
                              scope:
                                type: string
                                example: link, global
                                # TODO enum???
                        counters:
                          type: object
                          properties:
                            bytes_received:
                              type: integer
                            bytes_sent:
                              type: integer
                            packets_receive:
                              type: integer
                            packets_sent:
                              type: integer
                        hwaddr:
                          type: string
                          description: MAC address
                          example: 00:16:3e:ec:65:a8
                        host_name:
                          type: string
                          example: vethBWTSU5
                        mtu:
                          type: integer
                        state:
                          type: string
                          example: up
                          # TODO enum
                        type: 
                          type: string
                          example: broadcast
                pid:
                  type: integer
                processes:
                  type: integer       


    InstanceMetadataResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            metadata:
              type: object
              properties: 
                architecture: 
                  type: string
                  example: x86_64
                creation_date:
                  type: integer
                  example: 1477146654
                expiry_date:
                  type: integer
                  example: 0
                properties:
                  type: object
                  properties:
                    architecture:
                      type: string
                      example: x86_64
                    description:
                      type: string
                      example: BusyBox x86_64
                    name:
                      type: string
                      example: busybox-x86_64
                    os:
                      type: string
                      example: BusyBox
                templates:
                  type: object
                  properties:
                    templatePath:
                      type: object
                      properties:
                        when:
                          type: array
                          items:
                            type: string
                        create_only:
                          type: boolean
                        template:
                          type: string
                        properties:
                          type: object



    BackupInformationResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            metadata:
              type: object
              properties: 
                name:
                  type: string                  
                  example: backupName
                creation_date:
                  type: string
                  example: 2018-04-23T12:16:09+02:00
                expiry_date:
                  type: string
                  example: 2018-04-23T12:16:09+02:00
                instance_only:
                  type: boolean
                optimized_storage:
                  type: boolean

    BackupExportResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            metadata:
              type: object
              properties: 
                data:
                  type: string
                  description: Tarball byte stream

    ImageInfoResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            metadata:
              type: object
              properties: 
                aliases:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        example: bionic
                      description:
                        type: string
                architecture:
                  type: string
                  example: x86_64
                auto_update: 
                  type: boolean
                cached:
                  type: boolean
                fingerprint:
                  type: string
                  example: 54c8caac1f61901ed86c68f24af5f5d3672bdc62c71d04f06df3a59e95684473
                filename:
                  type: string
                  example: ubuntu-bionic-18.04-amd64-server-20180201.tar.xz
                properties:
                  type: object
                  properties:
                    architecture: 
                      type: string
                      example: x86_64
                    description:
                      type: string
                      example: Ubuntu 18.04 LTS server (20180601)
                    os:
                      type: string
                      example: ubuntu
                    release:
                      type: string
                      example: bionic
                update_source:
                  type: object
                  properties:
                    server:
                      type: string
                      example: https://10.1.2.4:8443
                    protocol:
                      type: string
                      example: lxd
                    certificate:
                      type: string
                      description: PEM certificate
                    alias:
                      type: string
                      example: ubuntu/bionic/amd64
                public:
                  type: boolean
                size:
                  type: integer
                created_at:
                  type: string
                  example: 2016-02-01T21:07:41Z
                expires_at:
                  type: string
                  example: 1970-01-01T00:00:00Z
                last_used-at:
                  type: string
                  example: 1970-01-01T00:00:00Z
                uploaded_at:
                  type: string
                  example: 2016-02-01T21:07:41Z


    ImageSecretResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            metadata:
              type: object
              properties: 
                secret:
                  type: string
                  example: 52e9ec5885562aa24d05d7b4846ebb8b5f1f7bf5cd6e285639b569d9eaf54c9b

    ImageAliasInfoResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            metadata:
              type: object
              properties: 
                name:
                  type: string
                description:
                  type: string
                target:
                  type: string
                  example: c9b6e738fae75286d52f497415463a8ecc61bbcb046536f220d797b0e500a41f
                  # SHA256 fingerprint i assume??? TODO

    NetworkInfoResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            metadata:
              type: object
              properties: 
                name:
                  type: string
                  example: lxbr0
                managed:
                  type: boolean
                type:
                  type: string
                  example: bridged
                used_by:
                  type: array
                  items:
                    type: string
                    example: /1.0/instances/blah
                config:
                  type: object
                  # TODO check this and fill in schema

    NetworkStateResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            metadata:
              type: object
              properties: 
              # TODO refactor this, this can be collapsed with instance state
                addresses:
                  type: array
                  items:
                    type: object
                    properties:
                      family:
                        type: string
                        example: inet
                      address:
                        type: string
                        example: 10.87.252.1
                      netmask:
                        type: integer
                        example: 24
                      scope:
                        type: string
                        example: global
                counters:
                  type: object
                  properties:
                    bytes_received:
                      type: integer
                    bytes_sent:
                      type: integer
                    packets_receive:
                      type: integer
                    packets_sent:
                      type: integer
                hwaddr:
                  type: string
                  description: MAC address
                  example: 00:16:3e:ec:65:a8
                host_name:
                  type: string
                  example: vethBWTSU5
                mtu:
                  type: integer
                state:
                  type: string
                  example: up
                  # TODO enum
                type: 
                  type: string
                  example: broadcast

    OperationsListResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            metadata:
              type: object
              properties: 
                success:
                  type: array
                  items:
                    type: string
                    example: /1.0/operations/c0fc0d0d-a997-462b-842b-f8bd0df82507
                running:
                  type: array
                  items:
                    type: string
                    example: /1.0/operations/c0fc0d0d-a997-462b-842b-f8bd0df82507

    ProfileInfoResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            metadata:
              type: object
              properties: 
                name:
                  type: string
                  example: test
                description:
                  type: string
                config:
                  type: object
                device:
                  type: object
                used_by:
                  type: array
                  items:
                    type: string
                    example: /1.0/instances/blah

    ProjectInfoResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            metadata:
              type: object
              properties: 
                name:
                  type: string
                  example: test
                config:
                  type: object
                  # TODO copy over
                description:
                  type: string
                used_by:
                  type: array
                  items: 
                    type: string
                    example: /1.0/instances/blah

    StoragePoolInfoResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            metadata:
              type: object
              properties: 
                name:
                  type: string
                  example: default
                driver:
                  type: string
                  example: zfs
                used_by:
                  type: array
                  items:
                    type: string
                    description: URL to instnace or image
                    example: /1.0/instances/alp1
                config:
                  type: object
                  properties:
                    size:
                      type: string
                      example: 61203283968
                      # TODO not integer
                    source:
                      type: string
                      example: /home/chb/mnt/l2/disks/default.img
                    volume.size:
                      type: string
                      example: 0
                    zfs.pool_name: 
                      type: string
                      example: default

    StoragePoolsResourcesResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            metadata:
              type: object
              properties: 
                space:
                  type: object
                  properties:
                    used:
                      type: integer
                      # TODO in bytes?
                    total:
                      type: integer
                inodes:
                  type: object
                  properties:
                    used:
                      type: integer
                    total:
                      type: integer
                    
    StoragePoolsMigrationResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            metadata:
              type: object
              properties: 
                control:
                  type: string
                fs:
                  type: string

    StoragePoolsVolumeInformationResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            metadata:
              type: object
              properties: 
                name:
                  type: string
                  example: volume1
                type: 
                  type: string
                  example: custom
                used_by:
                  type: array
                  items:
                    type: string
                  example: TODO I assuem image or instance urls?
                config:
                  type: object
                  properties:
                    block.filesystem: 
                      type: string
                      example: ext4
                    block.mount_options:
                      type: string
                      example: discard
                    size:
                      type: string
                      # TODO stirng???
                      example: 10737418240

    StoragePoolsVolumeSnapshotInformationResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            metadata:
              type: object
              properties: 
                name: 
                  type: string
                  example: snap0
                description: 
                  type: string
                config:
                  type: object

    VolumeBackupInformationResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            metadata:
              type: object
              properties: 
                name:
                  type: string
                  example: backupName
                creation_date:
                  type: string
                  example: 2018-04-23T12:16:09+02:00
                expiry_date:
                  type: string
                  example: 2018-04-23T12:16:09+02:00
                instance_only:
                  type: boolean
                optimized_storage:
                  type: boolean

    ResourcesResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            metadata:
              type: object
              properties: 
                cpu:
                  type: object
                  properties:
                    sockets:
                      type: array
                      description: each array entry describes the cpu in one socket
                      items:
                        type: object
                        properties:
                          cores:
                            type: integer
                            example: 2
                          threads:
                            type: integer
                            example: 4
                          frequency:
                            type: integer
                            # TODO in MHz?
                          frequency_turbo:
                            type: integer
                          name:
                            type: string
                            example: AMD Ryzen 5 5600X 6-Core Processor
                          vendor:
                            type: string
                            example: AuthenticAMD
                    memory:
                      type: object
                      properties:
                        used:
                          type: integer
                          # TODO in bytes
                        total:
                          type: integer

    ClusterInfoResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            metadata:
              type: object
              properties: 
                server_name: 
                  type: string
                  example: node1
                enabled:
                  type: boolean
                member_config:
                  type: array
                  items:
                    type: object
                    properties:
                      entity:
                        type: string
                        example: storage-pool
                      name: 
                        type: string
                        example: local
                      key:
                        type: string
                        example: source
                      description:
                        type: string
                        example: \"source\" property for storage pool \"local\"

    ClusterMemberInfoResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            metadata:
              type: object
              properties: 
                server_name:
                  type: string
                  example: lxd1
                url:
                  type: string
                  example: https://10.1.1.101:8443
                database:
                  type: boolean
                status:
                  type: string
                  example: Online
                message:
                  type: string
                  example: fully oprational

    UnusedSchema:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            metadata:
              type: object
              properties: {}

# TODO format
